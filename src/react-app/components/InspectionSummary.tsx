import { useState, useEffect } from 'react';
import { 
  Printer,
  CheckCircle2,
  AlertCircle,
  Star,
  Calendar,
  User,
  MapPin,
  Building2,
  Target,
  Percent,
  TrendingUp,
  AlertTriangle,
  Play,
  Volume2,
  Eye,
  Image as ImageIcon,
  MessageSquare,
  Brain,
  PenTool,
  Share2,
  Mail,
  MessageCircle,
  X,
  FileDown,
  QrCode,
  Smartphone,
  Globe
} from 'lucide-react';
// QR Code generation now handled by backend
import { InspectionType, InspectionItemType, InspectionMediaType } from '@/shared/types';
import SignaturePreview from '@/react-app/components/SignaturePreview';
import PDFGenerator from '@/react-app/components/PDFGenerator';

interface InspectionSummaryProps {
  inspection: InspectionType;
  items: InspectionItemType[];
  templateItems?: any[];
  media: InspectionMediaType[];
  responses: Record<number, any>;
  signatures: { inspector?: string; responsible?: string };
}

export default function InspectionSummary({
  inspection,
  items,
  templateItems = [],
  media,
  responses,
  signatures
}: InspectionSummaryProps) {
  
  // Generate QR Code for digital access
  useEffect(() => {
    const generateQRCode = async () => {
      if (inspection?.id) {
        try {
          // First, try to get existing share links
          const shareResponse = await fetch(`/api/inspections/${inspection.id}/shares`);
          let shareToken = null;
          
          if (shareResponse.ok) {
            const data = await shareResponse.json();
            const activeShare = data.shares?.find((s: any) => 
              s.is_active && (!s.expires_at || new Date(s.expires_at) > new Date())
            );
            shareToken = activeShare?.share_token;
          }
          
          // If no active share exists, create one
          if (!shareToken) {
            const createShareResponse = await fetch(`/api/inspections/${inspection.id}/share`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                permission: 'view',
                expires_at: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString() // 1 year
              })
            });
            
            if (createShareResponse.ok) {
              const shareData = await createShareResponse.json();
              shareToken = shareData.share_token;
            }
          }
          
          if (shareToken) {
            const sharedUrl = `${window.location.origin}/shared/${shareToken}`;
            setShareLink(sharedUrl);
            // QR code will be generated by the backend
            setQrCodeDataUrl('');
          }
        } catch (err) {
          console.error('Failed to generate QR code:', err);
        }
      }
    };
    
    generateQRCode();
  }, [inspection?.id]);
  const [showShareDropdown, setShowShareDropdown] = useState(false);
  const [showPrintOptions, setShowPrintOptions] = useState(false);
  const [showPDFGenerator, setShowPDFGenerator] = useState(false);
  const [includeActionPlan, setIncludeActionPlan] = useState(false);
  const [qrCodeDataUrl, setQrCodeDataUrl] = useState<string>('');
  const [shareLink, setShareLink] = useState<string>('');

  const formatResponseValue = (value: any, fieldType: string) => {
    switch (fieldType) {
      case 'boolean':
        const isTrue = value === true || value === 'true';
        const isFalse = value === false || value === 'false';
        
        if (!isTrue && !isFalse) {
          return <span className="text-slate-400 italic">Não respondido</span>;
        }
        
        return (
          <span className={`inline-flex items-center gap-1 px-2 py-1 text-xs font-medium rounded-full ${
            isTrue ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
          }`}>
            {isTrue ? (
              <>
                <CheckCircle2 className="w-3 h-3" />
                Conforme
              </>
            ) : (
              <>
                <AlertCircle className="w-3 h-3" />
                Não Conforme
              </>
            )}
          </span>
        );
      case 'rating':
        if (value === null || value === undefined || value === '') {
          return <span className="text-slate-400 italic">Não respondido</span>;
        }
        return (
          <div className="flex items-center gap-1">
            {[1, 2, 3, 4, 5].map((star) => (
              <Star
                key={star}
                className={`w-4 h-4 ${
                  star <= value ? 'text-yellow-400 fill-current' : 'text-slate-300'
                }`}
              />
            ))}
            <span className="ml-1 text-sm text-slate-600">({value}/5)</span>
          </div>
        );
      case 'multiselect':
        if (value === null || value === undefined || value === '') {
          return <span className="text-slate-400 italic">Não respondido</span>;
        }
        if (Array.isArray(value)) {
          return (
            <div className="flex flex-wrap gap-1">
              {value.map((item, index) => (
                <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
                  {item}
                </span>
              ))}
            </div>
          );
        }
        return <span>{String(value)}</span>;
      default:
        if (value === null || value === undefined || value === '') {
          return <span className="text-slate-400 italic">Não respondido</span>;
        }
        return <span>{String(value)}</span>;
    }
  };

  const getItemMedia = (itemId: number) => {
    return media.filter(m => m.inspection_item_id === itemId);
  };

  const renderMediaItem = (mediaItem: InspectionMediaType) => {
    if (mediaItem.media_type === 'image' && mediaItem.file_url.startsWith('data:image/')) {
      return (
        <div key={mediaItem.id} className="relative group">
          <img 
            src={mediaItem.file_url} 
            alt={mediaItem.file_name}
            className="w-full h-32 object-cover rounded-lg border border-slate-200"
          />
          <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all rounded-lg flex items-center justify-center">
            <Eye className="w-6 h-6 text-white opacity-0 group-hover:opacity-100 transition-opacity" />
          </div>
          <div className="mt-2">
            <p className="text-xs font-medium text-slate-700 truncate">{mediaItem.file_name}</p>
            {mediaItem.description && (
              <p className="text-xs text-slate-500 mt-1">{mediaItem.description}</p>
            )}
          </div>
        </div>
      );
    }
    
    if (mediaItem.media_type === 'audio') {
      return (
        <div key={mediaItem.id} className="border border-slate-200 rounded-lg p-3">
          <div className="flex items-center gap-2 mb-2">
            <Volume2 className="w-4 h-4 text-slate-500" />
            <span className="text-sm font-medium text-slate-700">{mediaItem.file_name}</span>
          </div>
          <audio controls className="w-full">
            <source src={mediaItem.file_url} />
            Browser não suporta reprodução de áudio.
          </audio>
          {mediaItem.description && (
            <p className="text-xs text-slate-500 mt-2">{mediaItem.description}</p>
          )}
        </div>
      );
    }
    
    if (mediaItem.media_type === 'video') {
      return (
        <div key={mediaItem.id} className="border border-slate-200 rounded-lg p-3">
          <div className="flex items-center gap-2 mb-2">
            <Play className="w-4 h-4 text-slate-500" />
            <span className="text-sm font-medium text-slate-700">{mediaItem.file_name}</span>
          </div>
          <video controls className="w-full max-h-48 rounded">
            <source src={mediaItem.file_url} />
            Browser não suporta reprodução de vídeo.
          </video>
          {mediaItem.description && (
            <p className="text-xs text-slate-500 mt-2">{mediaItem.description}</p>
          )}
        </div>
      );
    }
    
    return (
      <div key={mediaItem.id} className="border border-slate-200 rounded-lg p-3">
        <div className="flex items-center gap-2">
          <div className="p-2 bg-slate-100 rounded">
            <AlertTriangle className="w-4 h-4 text-slate-600" />
          </div>
          <div className="flex-1">
            <p className="text-sm font-medium text-slate-700">{mediaItem.file_name}</p>
            <p className="text-xs text-slate-500">
              {mediaItem.media_type} • {mediaItem.file_size ? `${Math.round(mediaItem.file_size / 1024)}KB` : 'Tamanho desconhecido'}
            </p>
            {mediaItem.description && (
              <p className="text-xs text-slate-500 mt-1">{mediaItem.description}</p>
            )}
          </div>
        </div>
      </div>
    );
  };

  // Calculate statistics
  const stats = {
    totalItems: 0,
    compliantItems: 0,
    nonCompliantItems: 0,
    conformanceRate: 0
  };

  // Count manual items
  items.forEach(item => {
    if (item.is_compliant === true) {
      stats.compliantItems++;
      stats.totalItems++;
    } else if (item.is_compliant === false) {
      stats.nonCompliantItems++;
      stats.totalItems++;
    }
  });

  // Count template items
  templateItems.forEach((item) => {
    try {
      const fieldData = JSON.parse(item.field_responses);
      const response = responses[fieldData.field_id];
      if (fieldData.field_type === 'boolean') {
        if (response === true || response === 'true') {
          stats.compliantItems++;
          stats.totalItems++;
        } else if (response === false || response === 'false') {
          stats.nonCompliantItems++;
          stats.totalItems++;
        }
      } else if (response !== null && response !== undefined && response !== '') {
        stats.compliantItems++;
        stats.totalItems++;
      }
    } catch (error) {
      console.error('Error processing template item:', error);
    }
  });

  stats.conformanceRate = stats.totalItems > 0 ? Math.round((stats.compliantItems / stats.totalItems) * 100) : 0;

  // Print function
  const handlePrint = () => {
    window.print();
    setShowPrintOptions(false);
  };

  // Share functions
  const handleShareByEmail = () => {
    const subject = encodeURIComponent(`Relatório de Inspeção - ${inspection.title}`);
    const body = encodeURIComponent(`
Olá,

Segue o relatório da inspeção realizada:

Título: ${inspection.title}
Local: ${inspection.location}
Inspetor: ${inspection.inspector_name}
Data: ${inspection.scheduled_date ? new Date(inspection.scheduled_date).toLocaleDateString('pt-BR') : 'N/A'}

Estatísticas:
- Total de Itens: ${stats.totalItems}
- Conformes: ${stats.compliantItems}
- Não Conformes: ${stats.nonCompliantItems}
- Taxa de Conformidade: ${stats.conformanceRate}%

Atenciosamente,
Sistema de Inspeções
    `);
    
    const mailtoUrl = `mailto:?subject=${subject}&body=${body}`;
    window.open(mailtoUrl, '_blank');
  };

  const handleShareByWhatsApp = () => {
    const message = encodeURIComponent(`
📋 *Relatório de Inspeção*

*Título:* ${inspection.title}
*Local:* ${inspection.location}
*Inspetor:* ${inspection.inspector_name}
*Data:* ${inspection.scheduled_date ? new Date(inspection.scheduled_date).toLocaleDateString('pt-BR') : 'N/A'}

📊 *Estatísticas:*
• Total de Itens: ${stats.totalItems}
• Conformes: ${stats.compliantItems} ✅
• Não Conformes: ${stats.nonCompliantItems} ❌
• Taxa de Conformidade: ${stats.conformanceRate}%

_Relatório gerado pelo Sistema de Inspeções_
    `);
    
    const whatsappUrl = `https://wa.me/?text=${message}`;
    window.open(whatsappUrl, '_blank');
  };

  return (
    <div className="space-y-8">
      {/* Print Options Modal */}
      {showPrintOptions && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 print:hidden">
          <div className="bg-white rounded-xl shadow-xl max-w-md w-full mx-4 p-6">
            <div className="flex items-center justify-between mb-6">
              <h3 className="font-heading text-xl font-bold text-slate-900">
                Opções de Impressão
              </h3>
              <button
                onClick={() => setShowPrintOptions(false)}
                className="text-slate-500 hover:text-slate-700"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            
            <div className="space-y-4">
              <div className="border border-slate-200 rounded-lg p-4">
                <label className="flex items-start gap-3 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={includeActionPlan}
                    onChange={(e) => setIncludeActionPlan(e.target.checked)}
                    className="mt-1 rounded border-slate-300 text-blue-600 focus:ring-blue-500"
                  />
                  <div>
                    <span className="font-medium text-slate-900">
                      Incluir Plano de Ação Completo
                    </span>
                    <p className="text-sm text-slate-600 mt-1">
                      Inclui todos os detalhes dos itens de ação, análises da IA e evidências visuais no relatório impresso.
                    </p>
                  </div>
                </label>
              </div>
              
              <div className="bg-blue-50 p-4 rounded-lg">
                <p className="text-sm text-blue-800">
                  <strong>Será impresso:</strong> Resumo da inspeção, estatísticas, respostas do checklist, assinaturas digitais
                  {includeActionPlan && ', plano de ação completo com todas as evidências'}
                </p>
              </div>
            </div>
            
            <div className="flex items-center gap-3 mt-6">
              <button
                onClick={handlePrint}
                className="flex-1 flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Printer className="w-4 h-4 mr-2" />
                Imprimir Agora
              </button>
              <button
                onClick={() => setShowPrintOptions(false)}
                className="px-4 py-2 text-slate-600 border border-slate-300 rounded-lg hover:bg-slate-50 transition-colors"
              >
                Cancelar
              </button>
            </div>
          </div>
        </div>
      )}

      <div className="printable-content">
        {/* Header */}
        <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4 print:hidden">
          <div>
            <h1 className="font-heading text-3xl font-bold text-slate-900">
              Resumo da Inspeção
            </h1>
            <p className="text-slate-600 mt-1">{inspection.title}</p>
          </div>
          <div className="flex flex-wrap items-center gap-3">
            <div className="flex items-center gap-2">
              <button
                onClick={() => setShowPDFGenerator(true)}
                className="flex items-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                <FileDown className="w-4 h-4 mr-2" />
                Gerar PDF
              </button>
              <button
                onClick={() => setShowPrintOptions(true)}
                className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Printer className="w-4 h-4 mr-2" />
                Imprimir
              </button>
            </div>
            <div className="relative">
              <button
                onClick={() => setShowShareDropdown(!showShareDropdown)}
                className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                <Share2 className="w-4 h-4 mr-2" />
                Compartilhar
              </button>
              {showShareDropdown && (
                <div className="absolute top-full mt-2 right-0 bg-white border border-slate-200 rounded-lg shadow-lg z-10 min-w-48">
                  <button
                    onClick={() => {
                      handleShareByEmail();
                      setShowShareDropdown(false);
                    }}
                    className="flex items-center w-full px-4 py-3 text-slate-700 hover:bg-slate-50 transition-colors"
                  >
                    <Mail className="w-4 h-4 mr-3" />
                    Compartilhar por E-mail
                  </button>
                  <button
                    onClick={() => {
                      handleShareByWhatsApp();
                      setShowShareDropdown(false);
                    }}
                    className="flex items-center w-full px-4 py-3 text-slate-700 hover:bg-slate-50 transition-colors border-t border-slate-100"
                  >
                    <MessageCircle className="w-4 h-4 mr-3" />
                    Compartilhar por WhatsApp
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Print Header - Only visible when printing */}
        <div className="hidden print:block mb-8">
          <div className="text-center border-b-2 border-blue-600 pb-4 mb-6">
            <h1 className="font-heading text-2xl font-bold text-slate-900 mb-2">
              RELATÓRIO DE INSPEÇÃO TÉCNICA
            </h1>
            <p className="text-lg text-slate-700">{inspection.title}</p>
            <p className="text-sm text-slate-500 mt-2">
              Gerado em {new Date().toLocaleDateString('pt-BR')} às {new Date().toLocaleTimeString('pt-BR')}
            </p>
          </div>
        </div>

        {/* Inspection Overview */}
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6 print:shadow-none print:border-gray-300">
          <h2 className="font-heading text-xl font-semibold text-slate-900 mb-6">
            Informações da Inspeção
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {inspection.company_name && (
              <div className="flex items-center gap-3">
                <Building2 className="w-5 h-5 text-slate-400" />
                <div>
                  <p className="text-sm text-slate-500">Empresa</p>
                  <p className="font-medium text-slate-900">{inspection.company_name}</p>
                </div>
              </div>
            )}
            <div className="flex items-center gap-3">
              <MapPin className="w-5 h-5 text-slate-400" />
              <div>
                <p className="text-sm text-slate-500">Local</p>
                <p className="font-medium text-slate-900">{inspection.location}</p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <User className="w-5 h-5 text-slate-400" />
              <div>
                <p className="text-sm text-slate-500">Inspetor</p>
                <p className="font-medium text-slate-900">{inspection.inspector_name}</p>
              </div>
            </div>
            {inspection.scheduled_date && (
              <div className="flex items-center gap-3">
                <Calendar className="w-5 h-5 text-slate-400" />
                <div>
                  <p className="text-sm text-slate-500">Data da Inspeção</p>
                  <p className="font-medium text-slate-900">
                    {new Date(inspection.scheduled_date).toLocaleDateString('pt-BR')}
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Statistics Section */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-gradient-to-br from-blue-500 to-blue-600 text-white p-6 rounded-xl shadow-sm print:bg-blue-100 print:text-blue-900">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-blue-100 print:text-blue-700 text-sm font-medium">Total de Itens</p>
                <p className="text-3xl font-bold">{stats.totalItems}</p>
              </div>
              <TrendingUp className="w-8 h-8 text-blue-200 print:text-blue-600" />
            </div>
          </div>

          <div className="bg-gradient-to-br from-green-500 to-green-600 text-white p-6 rounded-xl shadow-sm print:bg-green-100 print:text-green-900">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-green-100 print:text-green-700 text-sm font-medium">Conformes</p>
                <p className="text-3xl font-bold">{stats.compliantItems}</p>
              </div>
              <CheckCircle2 className="w-8 h-8 text-green-200 print:text-green-600" />
            </div>
          </div>

          <div className="bg-gradient-to-br from-red-500 to-red-600 text-white p-6 rounded-xl shadow-sm print:bg-red-100 print:text-red-900">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-red-100 print:text-red-700 text-sm font-medium">Não Conformes</p>
                <p className="text-3xl font-bold">{stats.nonCompliantItems}</p>
              </div>
              <AlertCircle className="w-8 h-8 text-red-200 print:text-red-600" />
            </div>
          </div>

          <div className="bg-gradient-to-br from-purple-500 to-purple-600 text-white p-6 rounded-xl shadow-sm print:bg-purple-100 print:text-purple-900">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-purple-100 print:text-purple-700 text-sm font-medium">Taxa de Conformidade</p>
                <p className="text-3xl font-bold">{stats.conformanceRate}%</p>
              </div>
              <Percent className="w-8 h-8 text-purple-200 print:text-purple-600" />
            </div>
          </div>
        </div>

        {/* Template Items */}
        {templateItems.length > 0 && (
          <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6 print:shadow-none print:border-gray-300">
            <h2 className="font-heading text-xl font-semibold text-slate-900 mb-6">
              Respostas do Checklist
            </h2>
            <div className="space-y-6">
              {templateItems.map((item, index) => {
                try {
                  const fieldData = JSON.parse(item.field_responses);
                  const itemMedia = getItemMedia(item.id);
                  const response = responses[fieldData.field_id];
                  const comment = (responses as Record<string, any>)[`comment_${fieldData.field_id}`];

                  return (
                    <div key={item.id} className="border border-slate-300 rounded-lg p-6 space-y-6 print:border-gray-400 print:page-break-inside-avoid">
                      {/* Pergunta */}
                      <div className="flex items-start gap-3">
                        <span className="inline-flex items-center justify-center w-6 h-6 bg-blue-100 text-blue-800 text-sm font-semibold rounded-full flex-shrink-0">
                          {index + 1}
                        </span>
                        <h3 className="text-lg font-semibold text-slate-900">{item.item_description}</h3>
                      </div>

                      {/* Resposta */}
                      <div>
                        <h4 className="text-sm font-medium text-slate-700 mb-2">Resposta</h4>
                        <div className="pl-4 border-l-2 border-slate-200">
                          {formatResponseValue(response, fieldData.field_type)}
                        </div>
                      </div>

                      {/* Comentário do usuário */}
                      {comment && (
                        <div className="bg-slate-50 p-3 rounded border border-slate-200">
                          <h4 className="text-sm font-medium text-slate-700 mb-2 flex items-center gap-2">
                            <MessageSquare className="w-4 h-4 text-slate-600" /> Comentário do Usuário
                          </h4>
                          <p className="text-sm text-slate-700">{comment}</p>
                        </div>
                      )}

                      {/* Análise da IA */}
                      {item.ai_pre_analysis && (
                        <div className="bg-blue-50 p-3 rounded border border-blue-200">
                          <h4 className="text-sm font-medium text-blue-900 mb-2 flex items-center gap-2">
                            <Brain className="w-4 h-4 text-blue-600" /> Pré-Análise da IA
                          </h4>
                          <p className="text-sm text-blue-900">{item.ai_pre_analysis}</p>
                        </div>
                      )}

                      {/* Plano de Ação da IA */}
                      {includeActionPlan && item.ai_action_plan && (() => {
                        try {
                          const actionPlan = JSON.parse(item.ai_action_plan);
                          if (!actionPlan?.actions?.length) return null;

                          return (
                            <div className="bg-purple-50 p-3 rounded border border-purple-200">
                              <h4 className="text-sm font-medium text-purple-900 mb-2 flex items-center gap-2">
                                <Target className="w-4 h-4 text-purple-600" /> Plano de Ação (IA)
                              </h4>
                              {actionPlan.summary && <p className="text-sm text-purple-800 mb-2">{actionPlan.summary}</p>}
                              <div className="space-y-2">
                                {actionPlan.actions.map((action: any, i: number) => (
                                  <div key={i} className="bg-white p-2 rounded border border-purple-200 text-xs text-slate-700">
                                    <p><strong>O que:</strong> {action.what}</p>
                                    <p><strong>Onde:</strong> {action.where}</p>
                                    <p><strong>Por que:</strong> {action.why}</p>
                                    <p><strong>Como:</strong> {action.how}</p>
                                  </div>
                                ))}
                              </div>
                            </div>
                          );
                        } catch (e) {
                          return null;
                        }
                      })()}

                      {/* Mídias anexadas */}
                      {includeActionPlan && itemMedia.length > 0 && (
                        <div>
                          <h4 className="text-sm font-medium text-slate-700 mb-3 flex items-center gap-2">
                            <ImageIcon className="w-4 h-4" /> Evidências Visuais ({itemMedia.length})
                          </h4>
                          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            {itemMedia.map((mediaItem) => renderMediaItem(mediaItem))}
                          </div>
                        </div>
                      )}
                    </div>
                  );
                } catch (err) {
                  return null;
                }
              })}
            </div>
          </div>
        )}

        {/* Manual Items */}
        {items.length > 0 && (
          <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6 print:shadow-none print:border-gray-300">
            <h2 className="font-heading text-xl font-semibold text-slate-900 mb-6">
              Itens Manuais
            </h2>
            <div className="space-y-6">
              {items.map((item, index) => {
                const itemMedia = getItemMedia(item.id!);
                
                return (
                  <div key={item.id} className="border border-slate-300 rounded-lg p-6 space-y-4 print:border-gray-400 print:page-break-inside-avoid">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <span className="inline-flex items-center justify-center w-6 h-6 bg-blue-100 text-blue-800 text-sm font-semibold rounded-full">
                            {index + 1}
                          </span>
                          <span className="px-2 py-1 bg-slate-100 text-slate-700 text-xs rounded">
                            {item.category}
                          </span>
                        </div>
                        <h3 className="font-medium text-slate-900 ml-9">{item.item_description}</h3>
                      </div>
                      <div className={`flex items-center gap-1 px-2 py-1 rounded text-xs font-medium ${
                        item.is_compliant === true ? 'bg-green-100 text-green-800' :
                        item.is_compliant === false ? 'bg-red-100 text-red-800' :
                        'bg-slate-100 text-slate-800'
                      }`}>
                        {item.is_compliant === true ? <CheckCircle2 className="w-3 h-3" /> : 
                         item.is_compliant === false ? <AlertCircle className="w-3 h-3" /> : null}
                        {item.is_compliant === true ? 'Conforme' : 
                         item.is_compliant === false ? 'Não Conforme' : 'Não Avaliado'}
                      </div>
                    </div>
                    
                    {item.observations && (
                      <div className="ml-9">
                        <h4 className="text-sm font-medium text-slate-700 mb-1">Observações</h4>
                        <p className="text-sm text-slate-600 pl-4 border-l-2 border-slate-200">{item.observations}</p>
                      </div>
                    )}
                    
                    {/* Item Media */}
                    {includeActionPlan && itemMedia.length > 0 && (
                      <div className="ml-9">
                        <h4 className="text-sm font-medium text-slate-700 mb-3 flex items-center gap-2">
                          <ImageIcon className="w-4 h-4" />
                          Evidências ({itemMedia.length})
                        </h4>
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                          {itemMedia.map(mediaItem => renderMediaItem(mediaItem))}
                        </div>
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {/* General Media */}
        {includeActionPlan && media.filter(m => !m.inspection_item_id).length > 0 && (
          <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6 print:shadow-none print:border-gray-300">
            <h2 className="font-heading text-xl font-semibold text-slate-900 mb-6">
              Mídias Gerais da Inspeção
            </h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {media.filter(m => !m.inspection_item_id).map(mediaItem => renderMediaItem(mediaItem))}
            </div>
          </div>
        )}

        {/* Signatures Section - Always displayed at the end */}
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6 print:shadow-none print:border-gray-300 print:page-break-before">
          <div className="flex items-center gap-2 mb-6">
            <PenTool className="w-5 h-5 text-slate-600" />
            <h2 className="font-heading text-xl font-semibold text-slate-900">
              Assinaturas Digitais
            </h2>
          </div>
          
          {/* Debug information - Only in development */}
          {process.env.NODE_ENV === 'development' && (
            <div className="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded text-sm">
              <p><strong>Debug - Signatures object:</strong></p>
              <pre className="text-xs mt-1 bg-white p-2 rounded border overflow-x-auto">
                {JSON.stringify(signatures, null, 2)}
              </pre>
              <div className="mt-2 flex gap-4">
                <span className={`px-2 py-1 rounded text-xs ${signatures.inspector ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                  Inspector: {signatures.inspector ? 'Present' : 'Missing'}
                </span>
                <span className={`px-2 py-1 rounded text-xs ${signatures.responsible ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                  Responsible: {signatures.responsible ? 'Present' : 'Missing'}
                </span>
              </div>
            </div>
          )}
          
          {(signatures.inspector || signatures.responsible) ? (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <SignaturePreview
                signature={signatures.inspector}
                signerName={inspection.inspector_name}
                signerRole="Inspetor Responsável"
                title="Assinatura do Inspetor"
              />
              <SignaturePreview
                signature={signatures.responsible}
                signerName={inspection.responsible_name || "Responsável Técnico"}
                signerRole="Empresa"
                title="Assinatura do Responsável da Empresa"
              />
            </div>
          ) : (
            <div className="text-center py-8">
              <PenTool className="w-12 h-12 text-slate-300 mx-auto mb-4" />
              <p className="text-slate-500 font-medium">Nenhuma assinatura digital disponível</p>
              <p className="text-slate-400 text-sm mt-1">
                As assinaturas serão exibidas após a finalização da inspeção
              </p>
            </div>
          )}
        </div>

        {/* Digital Access Section - QR Code */}
        {qrCodeDataUrl && (
          <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl shadow-sm border border-blue-200 p-6 print:shadow-none print:border-gray-300 print:page-break-inside-avoid">
            <div className="flex items-center gap-2 mb-4">
              <QrCode className="w-5 h-5 text-blue-600" />
              <h2 className="font-heading text-xl font-semibold text-slate-900">
                Acesso Digital ao Relatório
              </h2>
            </div>
            
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <div className="lg:col-span-1 flex flex-col items-center justify-center space-y-4">
                <div className="bg-white p-4 rounded-lg shadow-sm border border-slate-200">
                  <img 
                    src={qrCodeDataUrl} 
                    alt="QR Code do Relatório" 
                    className="w-32 h-32"
                  />
                </div>
                <div className="text-center">
                  <p className="text-sm font-medium text-slate-700 mb-1">
                    Escaneie para acessar online
                  </p>
                  <p className="text-xs text-slate-500">
                    Use a câmera do celular
                  </p>
                </div>
              </div>
              
              <div className="lg:col-span-2 space-y-4">
                <div className="bg-white rounded-lg p-4 border border-slate-200">
                  <h3 className="font-semibold text-slate-900 mb-3 flex items-center gap-2">
                    <Smartphone className="w-4 h-4 text-blue-600" />
                    Recursos do Relatório Digital
                  </h3>
                  <ul className="space-y-2 text-sm text-slate-600">
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-green-500 rounded-full"></div>
                      Visualização interativa de todas as evidências
                    </li>
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-blue-500 rounded-full"></div>
                      Coordenadas GPS clicáveis para navegação
                    </li>
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-purple-500 rounded-full"></div>
                      Reprodução de áudios e vídeos anexados
                    </li>
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-orange-500 rounded-full"></div>
                      Análises detalhadas da IA com planos de ação
                    </li>
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-red-500 rounded-full"></div>
                      Assinaturas digitais verificáveis
                    </li>
                  </ul>
                </div>
                
                <div className="bg-white rounded-lg p-4 border border-slate-200">
                  <h3 className="font-semibold text-slate-900 mb-2 flex items-center gap-2">
                    <Globe className="w-4 h-4 text-green-600" />
                    Link de Compartilhamento
                  </h3>
                  <div className="flex items-center gap-2">
                    <input
                      type="text"
                      value={shareLink}
                      readOnly
                      className="flex-1 text-xs bg-slate-50 border border-slate-200 rounded px-2 py-1 text-slate-600"
                    />
                    <button
                      onClick={() => navigator.clipboard.writeText(shareLink)}
                      className="px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors"
                    >
                      Copiar
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Print Footer */}
        <div className="hidden print:block mt-8 pt-4 border-t border-gray-300 text-center text-xs text-gray-500">
          {qrCodeDataUrl && (
            <div className="mb-6">
              <h3 className="font-semibold text-gray-700 mb-3">Acesse o Relatório Digital</h3>
              <img 
                src={qrCodeDataUrl} 
                alt="QR Code do Relatório" 
                className="w-24 h-24 mx-auto border border-gray-300 p-1 rounded"
              />
              <p className="mt-2 text-xs text-gray-600">
                Escaneie este código para acessar a versão digital completa
              </p>
            </div>
          )}
          <p>
            Relatório gerado automaticamente pelo Sistema IA SST Inspections em {new Date().toLocaleDateString('pt-BR')} às {new Date().toLocaleTimeString('pt-BR')}
          </p>
          <p className="mt-1">
            Este documento possui validade legal conforme legislação vigente
          </p>
          {(inspection.latitude && inspection.longitude) && (
            <p className="mt-2 text-xs">
              <strong>Localização GPS:</strong>{' '}
              <a 
                href={`https://www.google.com/maps/search/?api=1&query=${inspection.latitude},${inspection.longitude}`}
                className="text-blue-600 underline"
              >
                {inspection.latitude.toFixed(6)}, {inspection.longitude.toFixed(6)}
              </a>
            </p>
          )}
        </div>

        {/* PDF Generator Modal */}
        <PDFGenerator
          inspection={inspection}
          items={items}
          templateItems={templateItems}
          media={media}
          responses={responses}
          signatures={signatures}
          isOpen={showPDFGenerator}
          onClose={() => setShowPDFGenerator(false)}
          qrCodeDataUrl={qrCodeDataUrl}
          shareLink={shareLink}
        />
      </div>
    </div>
  );
}
